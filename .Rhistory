bind_cols(df_late_hm, "EBS" = "HealthMap")
), detection = "Late detection")
df_early <-
bind_cols(bind_rows(
bind_cols(df_early_pw, "EBS" = "PADI-web"),
bind_cols(df_early_hm, "EBS" = "HealthMap")
), detection = "Early detection")
df <- bind_rows(df_late, df_early)
df <-
bind_cols(df, variable =  factor(df[, column], levels = levels))
df <-
bind_cols(df, common_facet = common_label)
plot_df <- df %>%
ggplot(aes(
x = variable,
y = prop,
group = EBS,
fill = EBS
)) +
scale_y_continuous(
limits = c(0, 1),
breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1)
) +
theme(
axis.text = element_text(color = 'black',  size = size_font - 1),
axis.title = font_param,
# legend.position= "none",
legend.title = font_param,
legend.text = font_param,
panel.grid.major = element_blank(),
strip.text.x = font_param
) +
geom_bar(stat = "identity",
width = 0.5,
position = "dodge") +# facet_wrap(detection ~ .) +
facet_nested(~ common_facet + detection, labeller = label_both) +
scale_fill_manual(values = c("#6b7cb6", "#FF5733")) +
guides(fill = guide_legend(title = ""))    +
xlab("") + ylab("Frequency")
return(plot_df)
}
create_sp_focus_plot(primary_late_pw_focus_aggr, primary_late_hm_focus_aggr,
primary_early_pw_focus_aggr, primary_early_hm_focus_aggr,
column = "geographical_focus", levels = c("local", "national", "international"))
create_sp_focus_plot <-
function(df_late_pw,
df_late_hm,
df_early_pw,
df_early_hm,
column,
levels,
size_font = 14,
common_label = "Primary sources") {
font_param <- element_text(color = 'black',  size = size_font)
df_late <-
bind_cols(bind_rows(
bind_cols(df_late_pw, "EBS" = "PADI-web"),
bind_cols(df_late_hm, "EBS" = "HealthMap")
), detection = "Late detection")
df_early <-
bind_cols(bind_rows(
bind_cols(df_early_pw, "EBS" = "PADI-web"),
bind_cols(df_early_hm, "EBS" = "HealthMap")
), detection = "Early detection")
df <- bind_rows(df_late, df_early)
df <-
bind_cols(df, variable =  factor(df[, column], levels = levels))
df <-
bind_cols(df, common_facet = common_label)
plot_df <- df %>%
ggplot(aes(
x = variable,
y = prop,
group = EBS,
fill = EBS
)) +
scale_y_continuous(
limits = c(0, 1),
breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1)
) +
theme(
axis.text = element_text(color = 'black',  size = size_font - 1),
axis.title = font_param,
# legend.position= "none",
legend.title = font_param,
legend.text = font_param,
panel.grid.major = element_blank(),
strip.text.x = font_param
) +
geom_bar(stat = "identity",
width = 0.5,
position = "dodge") +# facet_wrap(detection ~ .) +
facet_nested(~ common_facet + detection) +
scale_fill_manual(values = c("#6b7cb6", "#FF5733")) +
guides(fill = guide_legend(title = ""))    +
xlab("") + ylab("Frequency")
return(plot_df)
}
create_sp_focus_plot(primary_late_pw_focus_aggr, primary_late_hm_focus_aggr,
primary_early_pw_focus_aggr, primary_early_hm_focus_aggr,
column = "geographical_focus", levels = c("local", "national", "international"))
create_sp_focus_plot(primary_late_pw_focus_aggr, primary_late_hm_focus_aggr,
primary_early_pw_focus_aggr, primary_early_hm_focus_aggr,
column = "geographical_focus", levels = c("local", "national", "international")) +
theme(panel.spacing = unit(0,"line"))
create_sp_focus_plot <-
function(df_late_pw,
df_late_hm,
df_early_pw,
df_early_hm,
column,
levels,
size_font = 14,
common_label = "Primary sources") {
font_param <- element_text(color = 'black',  size = size_font)
df_late <-
bind_cols(bind_rows(
bind_cols(df_late_pw, "EBS" = "PADI-web"),
bind_cols(df_late_hm, "EBS" = "HealthMap")
), detection = "Late detection")
df_early <-
bind_cols(bind_rows(
bind_cols(df_early_pw, "EBS" = "PADI-web"),
bind_cols(df_early_hm, "EBS" = "HealthMap")
), detection = "Early detection")
df <- bind_rows(df_late, df_early)
df <-
bind_cols(df, variable =  factor(df[, column], levels = levels))
df <-
bind_cols(df, common_facet = common_label)
plot_df <- df %>%
ggplot(aes(
x = variable,
y = prop,
group = EBS,
fill = EBS
)) +
scale_y_continuous(
limits = c(0, 1),
breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1)
) +
theme(
axis.text = element_text(color = 'black',  size = size_font - 1),
axis.title = font_param,
# legend.position= "none",
legend.title = font_param,
legend.text = font_param,
panel.grid.major = element_blank(),
strip.text.x = font_param
) +
geom_bar(stat = "identity",
width = 0.5,
position = "dodge") +# facet_wrap(detection ~ .) +
facet_nested(~ common_facet + detection, nest_line = element_line(linetype = 1)) +
scale_fill_manual(values = c("#6b7cb6", "#FF5733")) +
guides(fill = guide_legend(title = ""))    +
xlab("") + ylab("Frequency")
return(plot_df)
}
create_sp_focus_plot(primary_late_pw_focus_aggr, primary_late_hm_focus_aggr,
primary_early_pw_focus_aggr, primary_early_hm_focus_aggr,
column = "geographical_focus", levels = c("local", "national", "international"))
create_sp_focus_plot(primary_late_pw_focus_aggr, primary_late_hm_focus_aggr,
primary_early_pw_focus_aggr, primary_early_hm_focus_aggr,
column = "geographical_focus", levels = c("local", "national", "international")) +
theme(panel.spacing = unit(0,"line"))
create_sp_focus_plot(primary_late_pw_focus_aggr, primary_late_hm_focus_aggr,
primary_early_pw_focus_aggr, primary_early_hm_focus_aggr,
column = "geographical_focus", levels = c("local", "national", "international")) +
theme(strip.background = element_blank())
create_sp_focus_plot <-
function(df_late_pw,
df_late_hm,
df_early_pw,
df_early_hm,
column,
levels,
size_font = 14,
common_label = "Primary sources") {
font_param <- element_text(color = 'black',  size = size_font)
df_late <-
bind_cols(bind_rows(
bind_cols(df_late_pw, "EBS" = "PADI-web"),
bind_cols(df_late_hm, "EBS" = "HealthMap")
), detection = "Late detection")
df_early <-
bind_cols(bind_rows(
bind_cols(df_early_pw, "EBS" = "PADI-web"),
bind_cols(df_early_hm, "EBS" = "HealthMap")
), detection = "Early detection")
df <- bind_rows(df_late, df_early)
df <-
bind_cols(df, variable =  factor(df[, column], levels = levels))
df <-
bind_cols(df, common_facet = common_label)
plot_df <- df %>%
ggplot(aes(
x = variable,
y = prop,
group = EBS,
fill = EBS
)) +
scale_y_continuous(
limits = c(0, 1),
breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1)
) +
theme(
axis.text = element_text(color = 'black',  size = size_font - 1),
axis.title = font_param,
# legend.position= "none",
legend.title = font_param,
legend.text = font_param,
panel.grid.major = element_blank(),
strip.text.x = font_param
) +
geom_bar(stat = "identity",
width = 0.5,
position = "dodge") +# facet_wrap(detection ~ .) +
facet_nested(~ common_facet + detection, nest_line = element_line(linetype = 1)) +
theme(strip.background = element_blank()) +
scale_fill_manual(values = c("#6b7cb6", "#FF5733")) +
guides(fill = guide_legend(title = ""))    +
xlab("") + ylab("Frequency")
return(plot_df)
}
plot_focus_secondary <- create_sp_focus_plot(secondary_late_pw_focus_aggr, secondary_late_hm_focus_aggr,
secondary_early_pw_focus_aggr, secondary_early_hm_focus_aggr,
column = "geographical_focus", levels = c("local", "national", "international"),
common_label = "Secondary sources")
plot_focus_secondary
plot_focus_secondary
ggarrange(plot_focus_primary, plot_focus_secondary, nrow=2, common.legend = TRUE, legend="right") %>% ggsave(
filename = "./figures/Fig7.png",
width = 10,
height = 8,
dpi = 300
)
plot_focus_primary <- create_sp_focus_plot(primary_late_pw_focus_aggr, primary_late_hm_focus_aggr,
primary_early_pw_focus_aggr, primary_early_hm_focus_aggr,
column = "geographical_focus", levels = c("local", "national", "international"))
plot_focus_primary
ggarrange(plot_focus_primary, plot_focus_secondary, nrow=2, common.legend = TRUE, legend="right") %>% ggsave(
filename = "./figures/Fig7.png",
width = 10,
height = 8,
dpi = 300
)
suppressMessages(library(readxl))
library(reshape2)
library(dplyr)
library(ggplot2)
library(igraph)
library(stringr)
library(ggpubr)
library(readr)
library(RColorBrewer)
setwd("C:/GitHub/network_ebs")
source("./R/sna_functions.R")
source("./R/create_chord_diagrams.R")
# Reports from PADI-web
REPORTS_PW <- read_delim("./data/padiweb_reports.csv", show_col_types = FALSE) %>% mutate(publication_date = as.Date(publication_date, format="%Y-%m-%d"))
# Reports from HealthMap
REPORTS_HM <- read_delim("./data/healthmap_reports.csv", show_col_types = FALSE) %>% mutate(publication_date = as.Date(publication_date, format="%Y-%m-%d"))
# Events empres-i database
OIE_EVENTS  <- open_official_AI("./data/AI_official.csv", date_format =  "%Y-%m-%d")
OIE_EVENTS <- filter(OIE_EVENTS, reportingdate >= "2018-07-01") %>% filter(reportingdate <= "2019-06-30")
# Manually recorded non-official events
UNOFFICIAL_EVENTS <- read_delim("./data/unofficial_events.csv",
delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
# Sources
SOURCES <- read_delim(file="./data/sources.csv", delim=";", show_col_types = F) %>% mutate(label = str_trim(label))
# Tables for PADI-web network
EVENTS_PW <- read_delim("./data/padiweb_events.csv",
delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
PATHS_PW <- read_delim("./data/padiweb_paths.csv", delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
PATHS_PW$source_1 <- str_trim(PATHS_PW$source_1)
PATHS_PW$source_2 <- str_trim(PATHS_PW$source_2)
PATHS_EVENTS_PW <- read_delim("./data/padiweb_paths_events.csv", delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
# Tables for HealthMap network
EVENTS_HM <- read_delim("./data/healthmap_events.csv",
delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
PATHS_HM <- read_delim("./data/healthmap_paths.csv", delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
PATHS_HM$source_1 <- str_trim(PATHS_HM$source_1)
PATHS_HM$source_2 <- str_trim(PATHS_HM$source_2)
PATHS_HM$id_from_source_1 <- as.character(PATHS_HM$id_from_source_1)
PATHS_EVENTS_HM <- read_delim("./data/healthmap_paths_events.csv", delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(readxl))
library(reshape2)
library(dplyr)
library(ggplot2)
library(igraph)
library(stringr)
library(ggpubr)
library(readr)
library(RColorBrewer)
setwd("C:/GitHub/network_ebs")
source("./R/sna_functions.R")
source("./R/create_chord_diagrams.R")
# Reports from PADI-web
REPORTS_PW <- read_delim("./data/padiweb_reports.csv", show_col_types = FALSE) %>% mutate(publication_date = as.Date(publication_date, format="%Y-%m-%d"))
# Reports from HealthMap
REPORTS_HM <- read_delim("./data/healthmap_reports.csv", show_col_types = FALSE) %>% mutate(publication_date = as.Date(publication_date, format="%Y-%m-%d"))
# Events empres-i database
OIE_EVENTS  <- open_official_AI("./data/AI_official.csv", date_format =  "%Y-%m-%d")
OIE_EVENTS <- filter(OIE_EVENTS, reportingdate >= "2018-07-01") %>% filter(reportingdate <= "2019-06-30")
# Manually recorded non-official events
UNOFFICIAL_EVENTS <- read_delim("./data/unofficial_events.csv",
delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
# Sources
SOURCES <- read_delim(file="./data/sources.csv", delim=";", show_col_types = F) %>% mutate(label = str_trim(label))
# Tables for PADI-web network
EVENTS_PW <- read_delim("./data/padiweb_events.csv",
delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
PATHS_PW <- read_delim("./data/padiweb_paths.csv", delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
PATHS_PW$source_1 <- str_trim(PATHS_PW$source_1)
PATHS_PW$source_2 <- str_trim(PATHS_PW$source_2)
PATHS_EVENTS_PW <- read_delim("./data/padiweb_paths_events.csv", delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
# Tables for HealthMap network
EVENTS_HM <- read_delim("./data/healthmap_events.csv",
delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
PATHS_HM <- read_delim("./data/healthmap_paths.csv", delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
PATHS_HM$source_1 <- str_trim(PATHS_HM$source_1)
PATHS_HM$source_2 <- str_trim(PATHS_HM$source_2)
PATHS_HM$id_from_source_1 <- as.character(PATHS_HM$id_from_source_1)
PATHS_EVENTS_HM <- read_delim("./data/healthmap_paths_events.csv", delim  = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = F)
rbind(OIE_EVENTS %>% count(type_host) %>%
mutate(prop = prop.table(n)),
c("total", nrow(OIE_EVENTS), 1))
# PADI-web
EVENTS_PW <- EVENTS_PW %>% filter(id_event %in% PATHS_EVENTS_PW$id_event)
rbind(EVENTS_PW %>% select(id_event, type_event, host) %>% distinct() %>% count(type_event) %>%
mutate(prop = round(prop.table(n),3)),
c("total", nrow(EVENTS_PW), 1))
# HealthMap
EVENTS_HM <- EVENTS_HM %>% filter(id_event %in% PATHS_EVENTS_HM$id_event)
rbind(EVENTS_HM %>% select(id_event, type_event, host) %>% distinct() %>% count(type_event) %>%
mutate(prop = round(prop.table(n),3)),
c("total", nrow(EVENTS_HM), 1))
# PADI-web
EVENTS_PW %>% filter(!id_event %in% EVENTS_HM$id_event) %>% select(id_event, type_event, type_host) %>% group_by(type_event) %>% distinct() %>% count(type_host)
# HealthMap
EVENTS_HM %>% filter(!id_event %in% EVENTS_PW$id_event) %>% select(id_event, type_event, type_host) %>% group_by(type_event) %>% distinct() %>% count(type_host)
# PADI-web
EVENTS_PW %>% select(id_event, type_event, type_host) %>% group_by(type_event) %>% distinct() %>% count(type_host)%>%
mutate(prop = round(prop.table(n),3))
# HealthMap
EVENTS_HM %>% select(id_event, type_event, type_host) %>% group_by(type_event) %>% distinct() %>% count(type_host)%>%
mutate(prop = round(prop.table(n),3))
# PADI-web
rbind(REPORTS_PW %>% count(type) %>%
mutate(prop = prop.table(n)) %>% arrange(desc(prop)),
c("total", nrow(REPORTS_PW), 1))
# HealthMap
rbind(REPORTS_HM %>% count(type) %>%
mutate(prop = prop.table(n)) %>% arrange(desc(prop)),
c("total", nrow(REPORTS_HM), 1))
PATHS_EVENTS_PW  <- merge(PATHS_EVENTS_PW, EVENTS_PW)
REPORTS_EVENTS_PW <- merge(PATHS_EVENTS_PW, select(PATHS_PW, id_path, id_from_source_1))  %>% distinct()
event_by_report_pw <- aggregate(select(REPORTS_EVENTS_PW, id_from_source_1),
by = list(id_article= REPORTS_EVENTS_PW$id_from_source_1),
FUN = length)
PATHS_EVENTS_HM  <- merge(PATHS_EVENTS_HM, EVENTS_HM)
REPORTS_EVENTS_HM <-merge(PATHS_EVENTS_HM, select(PATHS_HM, id_path, id_from_source_1))%>% distinct()
event_by_report_hm <- aggregate(select(REPORTS_EVENTS_HM, id_from_source_1),
by = list(id_article = REPORTS_EVENTS_HM$id_from_source_1),
FUN = length)
summary(event_by_report_pw$id_from_source_1)
summary(event_by_report_hm$id_from_source_1)
# Official events
id_events_off <- pull(filter(EVENTS_PW, type_event == "official"), id_event)
# Paths transmitting official events
id_paths_off <- unique(pull(filter(PATHS_EVENTS_PW, id_event %in% id_events_off), id_path))
PATHS_EVENTS_OFF_PW <- filter(PATHS_EVENTS_PW, id_path %in% id_paths_off) %>% filter(id_event %in% id_events_off)
PATHS_EVENTS_OFF_PW <- merge(PATHS_EVENTS_OFF_PW, EVENTS_PW, by.all = "id_event", all.y =F)
PATHS_EVENTS_OFF_PW <- merge(PATHS_EVENTS_OFF_PW, select(PATHS_PW, id_path, source_1, date_edge), by.all = "id_path")
PATHS_EVENTS_OFF_PW <- PATHS_EVENTS_OFF_PW %>% filter(source_1 %in% c("PADI-web"))
PATHS_EVENTS_OFF_PW$timeliness <- as.numeric(difftime(PATHS_EVENTS_OFF_PW$date_edge,
PATHS_EVENTS_OFF_PW$reportingdate,
units="days"))
# For each event, detect the first report which detected it
df_timeliness_pw <- PATHS_EVENTS_OFF_PW %>% select(id_event, type_host, timeliness) %>%
group_by(id_event, type_host) %>%
filter(timeliness == min(timeliness)) %>% unique()
summary(df_timeliness_pw$timeliness)
# Early detection
length(which(df_timeliness_pw$timeliness<0))
# Late detection
length(which(df_timeliness_pw$timeliness>=0))
host_levels <-  c("domestic", "wild", "environmental", "unspecified")
df_timeliness_pw <- df_timeliness_pw %>% mutate(Host = factor(type_host, levels = host_levels)) %>% group_by(timeliness, Host) %>% count() %>% mutate(n = n*100/nrow(df_timeliness_pw))
nrow(filter(PATHS_EVENTS_OFF_PW, type_host == "wild") %>% filter(timeliness<0))
nrow(filter(PATHS_EVENTS_OFF_PW, type_host == "domestic") %>% filter(timeliness<0))
# Official events
id_events_off <- pull(filter(EVENTS_HM, type_event == "official"), id_event)
# Paths transmitting official events
id_paths_off <- unique(pull(filter(PATHS_EVENTS_HM, id_event %in% id_events_off), id_path))
PATHS_EVENTS_OFF_HM <- filter(PATHS_EVENTS_HM, id_path %in% id_paths_off) %>% filter(id_event %in% id_events_off)
PATHS_EVENTS_OFF_HM <- merge(PATHS_EVENTS_OFF_HM, EVENTS_HM, by.all = "id_event", all.y =F)
PATHS_EVENTS_OFF_HM <- merge(PATHS_EVENTS_OFF_HM, select(PATHS_HM, id_path, source_1, date_edge), by.all = "id_path")
PATHS_EVENTS_OFF_HM <- PATHS_EVENTS_OFF_HM %>% filter(source_1 %in% c("HealthMap"))
PATHS_EVENTS_OFF_HM$timeliness <- as.numeric(difftime(PATHS_EVENTS_OFF_HM$date_edge,
PATHS_EVENTS_OFF_HM$reportingdate,
units="days"))
# For each event, detect the first report which detected it
df_timeliness_hm <- PATHS_EVENTS_OFF_HM %>% select(id_event, type_host, timeliness) %>%
group_by(id_event, type_host) %>%
filter(timeliness == min(timeliness)) %>% unique()
df_timeliness_hm <- df_timeliness_hm %>% mutate(Host = factor(type_host, levels = host_levels))
df_timeliness_hm <- df_timeliness_hm %>% select(-id_event) %>% group_by(timeliness, Host) %>% count() %>% mutate(n = n*100/nrow(df_timeliness_hm))
summary(PATHS_EVENTS_OFF_HM$timeliness)
# Early detection
length(which(PATHS_EVENTS_OFF_HM$timeliness<0))
# Late detection
length(which(PATHS_EVENTS_OFF_HM$timeliness>=0))
SOURCES_PW$source[SOURCES_PW$source %in% SOURCES_HM$source]
length(SOURCES_PW$source[SOURCES_PW$source %in% SOURCES_HM$source])
n_unique = SOURCES_PW$source[!SOURCES_PW$source %in% SOURCES_HM$source] %>% length()
rbind(SOURCES_PW %>% filter(!source %in% SOURCES_HM$source) %>%
count(type_source) %>%
arrange(desc(n)) %>%
mutate(prop = prop.table(n)),
c("total", n_unique, 1))
n_unique = SOURCES_HM$source[!SOURCES_HM$source %in% SOURCES_HM$source] %>% length()
rbind(SOURCES_HM %>% filter(!source %in% SOURCES_PW$source) %>%
count(type_source) %>%
arrange(desc(n)) %>%
mutate(prop = prop.table(n)),
c("total", n_unique, 1))
n_unique = SOURCES_HM$source[!SOURCES_HM$source %in% SOURCES_HM$source] %>% length()
rbind(SOURCES_HM %>% filter(!source %in% SOURCES_PW$source) %>%
count(type_source) %>%
arrange(desc(n)) %>%
mutate(prop = prop.table(n)),
c("total", n_unique, 1))
n_unique = SOURCES_HM$source[!SOURCES_HM$source %in% SOURCES_PW$source] %>% length()
rbind(SOURCES_HM %>% filter(!source %in% SOURCES_PW$source) %>%
count(type_source) %>%
arrange(desc(n)) %>%
mutate(prop = prop.table(n)),
c("total", n_unique, 1))
n_unique = SOURCES_PW$source[!SOURCES_PW$source %in% SOURCES_HM$source] %>% length()
padiweb_sources <- rbind(SOURCES_PW %>% filter(!source %in% SOURCES_HM$source) %>%
count(type_source) %>%
arrange(desc(n)) %>%
mutate(prop = prop.table(n)),
c("total", n_unique, 1))
write.table(padiweb_sources, "./tables/df_padiweb_sources.csv", sep = ";", row.names = F, col.names = T)
n_unique = SOURCES_HM$source[!SOURCES_HM$source %in% SOURCES_PW$source] %>% length()
healthmap_sources = rbind(SOURCES_HM %>% filter(!source %in% SOURCES_PW$source) %>%
count(type_source) %>%
arrange(desc(n)) %>%
mutate(prop = prop.table(n)),
c("total", n_unique, 1))
write.table(healthmap_sources, "./tables/df_hm_sources.csv", sep = ";", row.names = F, col.names = T)
View(SOURCES_HM)
SOURCES_HM%>%
count(type_source)
healthmap_sources = merge(SOURCES_HM%>% count(type_source),
SOURCES_HM %>% filter(!source %in% SOURCES_PW$source) %>%
count(type_source) %>%
rename(n_unique = n) %>%
arrange(desc(n_unique)) %>%
mutate(prop_unique = prop.table(n_unique)),
all.x = T)
View(healthmap_sources)
?merge
n_unique <- SOURCES_HM$source[!SOURCES_HM$source %in% SOURCES_PW$source] %>% length()
healthmap_sources <- merge(SOURCES_HM%>% count(type_source),
SOURCES_HM %>% filter(!source %in% SOURCES_PW$source) %>%
count(type_source) %>%
rename(n_unique = n) %>%
arrange(desc(n_unique)) %>%
mutate(prop_unique = prop.table(n_unique)),
all.x = T)
write.table(healthmap_sources, "./tables/df_hm_sources.csv", sep = ";", row.names = F, col.names = T)
S3.Data <- read.csv("C:/GitHub/network_ebs/supplementary material/S3 Data.csv", sep=";")
View(S3.Data)
n_unique <- SOURCES_HM$source[!SOURCES_HM$source %in% SOURCES_PW$source] %>% length()
healthmap_sources <- merge(SOURCES_HM%>% count(type_source),
SOURCES_HM %>% filter(!source %in% SOURCES_PW$source) %>%
count(type_source) %>%
rename(n_unique = n) %>%
arrange(desc(n_unique)) %>%
mutate(prop_unique = prop.table(n_unique)),
all.x = T)
write.table(healthmap_sources, "./tables/df_hm_sources.csv", sep = ";", row.names = F, col.names = T)
n_unique = SOURCES_PW$source[!SOURCES_PW$source %in% SOURCES_HM$source] %>% length()
padiweb_sources <- merge(SOURCES_PW%>% count(type_source),
SOURCES_PW %>% filter(!source %in% SOURCES_HM$source) %>%
count(type_source) %>%
rename(n_unique = n) %>%
arrange(desc(n_unique)) %>%
mutate(prop_unique = prop.table(n_unique)),
all.x = T)
write.table(padiweb_sources, "./tables/df_padiweb_sources.csv", sep = ";", row.names = F, col.names = T)
PATHS_NETWORK <- create_df_network(bind_rows(PATHS_PW, PATHS_HM), SOURCES)
g <- graph.data.frame(PATHS_NETWORK, directed = TRUE)
PATHS_NETWORK_PW <- create_df_network(PATHS_PW, SOURCES)
g_pw <- graph.data.frame(PATHS_NETWORK_PW, directed = TRUE)
PATHS_NETWORK_HM <- create_df_network(PATHS_HM, SOURCES)
g_hm <- graph.data.frame(PATHS_NETWORK_HM, directed = TRUE)
vcount(g_pw)
vcount(g_hm)
ecount(g_pw)
ecount(g_hm)
length(unique(PATHS_PW$id_path))
length(unique(PATHS_HM$id_path))
